#library for fviz_cluster
library(factoextra)
library(cluster)

#importing the Iris dataset and removing categorical attributes
data <- iris
data$Species <- NULL

#K-Means Clustering
distance1 <- scale(dist(data,method="euclidian"))
kModel <- kmeans(distance1,3)
fviz_cluster(kModel, data, geom="point")


#Hierarchical Clustering
distance2 <- dist(data[,3:4],method="euclidian")
hModel <- hclust(distance2,method="average")
plot(hModel)








#Input dataset
data <- read.csv("input.csv")

#Selecting columns
age <- data[1:7,1:1]
circum <- data[1:7,2:2]

plot(age, circum, xlab = "age", ylab = "circumference")

#data <- data.frame(age, circum)
model = lm(circum ~ age, data)
summary(model)

abline(model)

new_data <- data.frame(age = 1000)
result <- predict(model, new_data)
print(result)









# Install packages
install.packages("party")
install.packages("e1071")
install.packages("caret")

#load libraries

library(party)  #Contains the decision tree functions
library(caret)  #Contains confusion matrix functions
library(e1071)  #Contains the naive bayes functions
library(rpart)	#for decision tree1
library(rpart.plot)	#graph for decision tree1

#data <- read.csv(file = "/Users/vishalprabhachandar/Documents/Programming/DataminingLab/R-Programs/1.4/input.csv")
#View(data)

#We need a large dataset for modeling the decision tree so inform the teacher and use a built in dataset
data <- readingSkills
#Split dataset into test and train
index <- sample(2, nrow(data), replace=TRUE, prob=c(0.7,0.3))
train <- data[index==1,]
test <- data[index==2,]

#Select the dependent and independent features
features <- nativeSpeaker ~ age + shoeSize + score

#DECISION TREE

#Obtain a decision tree model
model <- ctree(features, data=train)
tree1 <- rpart(features,train,method="class")
rpart.plot(tree1)

#Plot the model
plot(model)

#Evaluate model on test data

test_predictions <- predict(model, newdata=test)
confusionMatrix(test_predictions, test$nativeSpeaker, positive="yes")

#NAIVE BAYES CLASSIFIER

#Obtain a decision tree model
model2 <- naiveBayes(features, data=train)

#Model Summary
print(model2)

#Evaluate model on test data
test_predictions2 <- predict(model2, newdata = test)
confusionMatrix(test_predictions2, test$nativeSpeaker, positive="yes")
